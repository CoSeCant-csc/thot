# Author: Daniel Ortiz Mart\'inez
# *- bash -*

# Target function to be used with the downhill package.  The target
# function adjusted by this script is the alignment error rate for the
# alignments generated by a stack decoder.  The alignments are generated
# using the "thot_aligner" tool, which is provided by the "thot"
# package.

########
calc_nnc_pen()
{
    we="$1"
    nnc="$2"
    pen_fact=$3
    echo "$we" | $AWK -v nnc="${nnc}" -v pen_fact=${pen_fact}\
                      'BEGIN{
                             result=0;
                             split(nnc,nnc_arr," ")
                            }
                            {   
                             for(i=1;i<=NF;++i)
                             {
                              if($i<0 && nnc_arr[i]==1) 
                               result+=$i*pen_fact*(-1)
                             }
                            }
                         END{
                             printf"%f",result
                            }'
}

########
generate_wa_file()
{
    if [ "${EXPER_TYPE}" = "CONVENTIONAL" ]; then
        # Convert alignment format
        $UTILSDIR/A3_to_wa.sh ${SDIR}/target_func.A3.final ${ANSWERS_WA} > ${SDIR}/target_func.wa
    fi

    if [ "${EXPER_TYPE}" = "naacl_shtask" ]; then
        
        # Convert alignment format
        $UTILSDIR/A3_to_wa.sh ${SDIR}/target_func.A3.final ${ANSWERS_WA} > ${SDIR}/phralig.wa
                
        # Obtain alignment at word level direct model
        $UTILSDIR/phral2wal.sh ${SDIR}/phralig.wa $REF $TEST $SWTM > ${SDIR}/wordalig.wa

        # Obtain alignment at word level inverse model
        $UTILSDIR/flipwa.sh ${SDIR}/phralig.wa > ${SDIR}/transposed_phralig.wa
        $UTILSDIR/phral2wal.sh ${SDIR}/transposed_phralig.wa $TEST $REF $ISWTM \
            | $UTILSDIR/flipwa.sh > ${SDIR}/invwordalig.wa
        
        # Combine alignments
       
        # and operation
        #$UTILSDIR/cross_aligs.sh ${SDIR}/wordalig.wa ${SDIR}/invwordalig.wa \
        #    | grep "S" > ${SDIR}/combalig.wa
 
        # or operation
        $UTILSDIR/cross_aligs.sh ${SDIR}/wordalig.wa ${SDIR}/invwordalig.wa > ${SDIR}/target_func.wa

        # Obtain null alignments
        $UTILSDIR/put_null_aligs.sh ${SDIR}/target_func.wa $REF $TEST > ${SDIR}/target_func_null.wa
    fi
}

########
evaluate_results()
{
    # Use variable MEASURE to switch between different alignment
    # quality/error measures
    case $MEASURE in
        "AER") # Calculate the AER measure
            ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func.wa | grep "AER" >> ${SDIR}/target_func.${MEASURE}
            # Print target function value
            tail -1 ${SDIR}/target_func.${MEASURE} | ${AWK} '{printf"%s\n",$3}'
            ;;
        "FMS") # Calculate the F-measure for sure alignments
            ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func.wa | grep "F-measure" | head -1 >> ${SDIR}/target_func.${MEASURE}
            # Print target function value
            tail -1 ${SDIR}/target_func.${MEASURE} | ${AWK} '{printf"%f\n",1-$3}'
            ;;
        "FMP") # Calculate the F-measure for probable alignments
            ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func.wa | grep "F-measure" | tail -1 >> ${SDIR}/target_func.${MEASURE}
            # Print target function value
            tail -1 ${SDIR}/target_func.${MEASURE} | ${AWK} '{printf"%f\n",1-$3}'
            ;;
    esac


    # The following measures are available only for "naacl_shtask" experimentation
    if [ "${EXPER_TYPE}" = "naacl_shtask" ]; then
        case $MEASURE in
            "AER_NULL") # Calculate the AER measure
                ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func_null.wa | grep "AER" >> ${SDIR}/target_func_null.${MEASURE}
                # Obtain AER_NULL
                AER_NULL=`tail -1 ${SDIR}/target_func_null.${MEASURE} | ${AWK} '{printf"%s\n",$3}'`
                # Print target function value
                echo "${AER_NULL} ${nnc_pen}" | $AWK '{printf"%f\n",$1+$2}'
                ;;

            "FMS_NULL") # Calculate the F-measure for sure alignments
                ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func_null.wa | grep "F-measure" | head -1 >> ${SDIR}/target_func_null.${MEASURE}
                # Obtain FMS_NULL
                FMS_NULL=`tail -1 ${SDIR}/target_func_null.${MEASURE} | ${AWK} '{printf"%f\n",1-$3}'`
                # Print target function value
                echo "${FMS_NULL} ${nnc_pen}" | $AWK '{printf"%f\n",$1+$2}'
                ;;

            "FMP_NULL") # Calculate the F-measure for probable alignments
                ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func_null.wa | grep "F-measure" | tail -1 >> ${SDIR}/target_func_null.${MEASURE}
                # Obtain FMP_NULL
                FMP_NULL=`tail -1 ${SDIR}/target_func_null.${MEASURE} | ${AWK} '{printf"%f\n",1-$3}'`
                # Print target function value
                echo "${FMP_NULL} ${nnc_pen}" | $AWK '{printf"%f\n",$1+$2}'
                ;;

            "AER_NULL_NONULL") # Calculate the AER measure
                ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA ${SDIR}/target_func.wa | grep "AER" >> ${SDIR}/target_func.${MEASURE}
                # Obtain AER
                AER=`tail -1 ${SDIR}/target_func.${MEASURE} | ${AWK} '{printf"%s\n",$3}'`
                ${UTILSDIR}/wa_eval_align.pl $ANSWERS_WA_NULL ${SDIR}/target_func_null.wa | grep "AER" >> ${SDIR}/target_func_null.${MEASURE}
                # Obtain AER_NULL
                AER_NULL=`tail -1 ${SDIR}/target_func_null.${MEASURE} | ${AWK} '{printf"%s\n",$3}'`
                # Obtain AER+AER_NULL
                AER_NULL_NONULL=`echo "" | ${AWK} -v AER=$AER -v AER_NULL=$AER_NULL '{printf"%f\n",AER+AER_NULL}'`
                # Print target function value
                echo "${AER_NULL_NONULL} ${nnc_pen}" | $AWK '{printf"%f\n",$1+$2}'
                ;;
        esac
    fi
}

########

if [ $# -lt 2 ]; then
    echo "Usage: downhill_trgfunc_alig <sdir> <w1> ... <wn>"
else
    # Initialize variables
    if [ "${PHRALIGNER}" = "" ]; then PHRALIGNER=${bindir}/thot_aligner; fi
    if [ "${BASEDIR}" = "" ]; then BASEDIR=${HOME}/smt/tasks/hansards_alig ; fi
    if [ "${TM}" = "" ]; then TM=${BASEDIR}/TM/my_en_fr_lw ; fi
    if [ "${SWTM}" = "" ]; then SWTM=${BASEDIR}/TM/en_fr_lw ; fi # Required by $UTILSDIR/phral2wal.sh
    if [ "${ISWTM}" = "" ]; then ISWTM=${BASEDIR}/TM/fr_en_lw ; fi # Required by $UTILSDIR/phral2wal.sh
    if [ "${LM}" = "" ]; then LM=${BASEDIR}/LM/en_void.lm ; fi
    if [ "${TEST}" = "" ]; then TEST=${BASEDIR}/DATA/fr_test_lw ; fi
    if [ "${REF}" = "" ]; then REF=${BASEDIR}/DATA/en_test_lw ; fi
    if [ "${ANSWERS_WA}" = "" ]; then ANSWERS_WA=${BASEDIR}/DATA/test_norm_ids.wa ; fi
    if [ "${ANSWERS_WA_NULL}" = "" ]; then ANSWERS_WA_NULL=${BASEDIR}/DATA/test_null_norm_ids.wa ; fi
    if [ "${UTILSDIR}" = "" ]; then UTILSDIR=$HOME/smt/tasks/hansards_alig/UTILS/eamt08 ; fi
    if [ "${W}" = "" ]; then W="5" ; fi
    if [ "${S}" = "" ]; then S="128" ; fi
    if [ "${A}" = "" ]; then A="5" ; fi
    if [ "${E}" = "" ]; then W="10" ; fi
    if [ "${NOMON}" = "" ]; then NOMON="0" ; fi
    if [ "${BE}" != "-be" ]; then BE="" ; fi
    if [ "${HEUR}" = "" ]; then HEUR="6" ; fi
    if [ "${MEASURE}" = "" ]; then MEASURE="AER" ; fi
    if [ "${EXPER_TYPE}" = "" ]; then EXPER_TYPE="CONVENTIONAL" ; fi
    if [ "${NNC_PEN_FACTOR}" = "" ]; then NNC_PEN_FACTOR=1000; fi

    # Read parameters
    SDIR=$1
    shift
    NUMW=$#
    weights=""
    while [ $# -gt 0 ]; do
        # Build weight vector
        weights="${weights} $1"
        shift
    done

    # Obtain non-negativity constraints penalty (non-negativity
    # constraints can be activated for each individual weight by means
    # of the environment variable NON_NEG_CONST, which contains a bit
    # vector; a value of 1 for i'th vector means that the i'th weight
    # must be positive)
    nnc_pen=0
    if [ ! "${NON_NEG_CONST}" = "" ]; then
        nnc_pen=`calc_nnc_pen "${weights}" "${NON_NEG_CONST}" ${NNC_PEN_FACTOR}`
    fi

    # Print translator config
    ${PHRALIGNER} --config > ${SDIR}/aligner.cfg 2>&1

    # Generate alignments
    ${PHRALIGNER} -tm ${TM} -lm ${LM} \
        -t ${TEST} -r ${REF} -W $W -S $S -A $A -E $E -nomon $NOMON $BE -h $HEUR -we ${weights} \
        -v > ${SDIR}/target_func.A3.final 2> ${SDIR}/target_func.log || aligner_error="yes"

    # Treat aligner error if necessary
    if [ "${decoder_error}" = "yes" ]; then
        echo "Error while executing aligner, for additional information see file ${SDIR}/target_func.log" >&2
        exit 1
    fi

    # Obtain .wa file with the alignments to evaluate depending on the
    # experiment type
    generate_wa_file

    # Evaluate results
    evaluate
fi
